/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        /omit-if-no-ref/

        cp: kp: behavior_key_press {
            compatible = "zmk,behavior-key-press";
            label = "KEY_PRESS";
            #binding-cells = <1>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        kt: behavior_key_toggle {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_TOGGLE";
            #binding-cells = <1>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        trans: behavior_transparent {
            compatible = "zmk,behavior-transparent";
            label = "TRANS";
            #binding-cells = <0>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        none: behavior_none {
            compatible = "zmk,behavior-none";
            label = "NONE";
            #binding-cells = <0>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        mt: behavior_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        lt: behavior_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings =
                <&mo>,
                <&kp>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings =
                <&kp (((((0x07) << 16) | (0x29))))>,
                <&kp ((((0x07) << 16) | (0x35)))>;

            mods = <(0x08|0x02|0x80|0x20)>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        sk: behavior_sticky_key {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY";
            #binding-cells = <1>;
            release-after-ms = <1000>;
            bindings = <&kp>;
            ignore-modifiers;
        };

        /omit-if-no-ref/

        sl: behavior_sticky_layer {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_LAYER";
            #binding-cells = <1>;
            release-after-ms = <1000>;
            bindings = <&mo>;
            quick-release;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        mo: behavior_momentary_layer {
            compatible = "zmk,behavior-momentary-layer";
            label = "MO";
            #binding-cells = <1>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        tog: behavior_toggle_layer {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOGGLE_LAYER";
            #binding-cells = <1>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        to: behavior_to_layer {
            compatible = "zmk,behavior-to-layer";
            label = "TO_LAYER";
            #binding-cells = <1>;
        };
    };
};

/ {
    behaviors {
        sys_reset: behavior_reset {
            compatible = "zmk,behavior-reset";
            label = "SYSRESET";
            #binding-cells = <0>;
        };
        bootloader: behavior_reset_dfu {
            compatible = "zmk,behavior-reset";
            label = "BOOTLOAD";
            type = <0x57>;
            #binding-cells = <0>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        inc_dec_cp: inc_dec_kp: behavior_sensor_rotate_key_press {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENC_KEY_PRESS";
            sensor-#binding-cells = <2>;
            bindings =
                <&kp>,
                <&kp>;
        };
    };
};

/ {
    behaviors {
        rgb_ug: behavior_rgb_underglow {
            compatible = "zmk,behavior-rgb-underglow";
            label = "RGB_UG";
            #binding-cells = <2>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        bt: behavior_bluetooth {
            compatible = "zmk,behavior-bluetooth";
            label = "BLUETOOTH";
            #binding-cells = <2>;
        };
    };
};

/ {
    behaviors {
        ext_power: behavior_ext_power {
            compatible = "zmk,behavior-ext-power";
            label = "EXTPOWER";
            #binding-cells = <1>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        out: behavior_outputs {
            compatible = "zmk,behavior-outputs";
            label = "OUTPUTS";
            #binding-cells = <1>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        caps_word: behavior_caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD";
            #binding-cells = <0>;
            continue-list = <((0x02 << 24 | (((0x07) << 16) | (0x2D)))) ((((0x07) << 16) | (0x2A))) ((((0x07) << 16) | (0x4C)))>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        key_repeat: behavior_key_repeat {
            compatible = "zmk,behavior-key-repeat";
            label = "KEY_REPEAT";
            #binding-cells = <0>;
            usage-pages = <(0x07)>;
        };
    };
};

/ {
    behaviors {
        /omit-if-no-ref/

        bl: behavior_backlight {
            compatible = "zmk,behavior-backlight";
            label = "BCKLGHT";
            #binding-cells = <2>;
        };
    };
};

/ {
    behaviors {
        macro_tap: macro_control_mode_tap {
            compatible = "zmk,macro-control-mode-tap";
            label = "MAC_TAP";
            #binding-cells = <0>;
        };
        macro_press: macro_control_mode_press {
            compatible = "zmk,macro-control-mode-press";
            label = "MAC_PRESS";
            #binding-cells = <0>;
        };
        macro_release: macro_control_mode_release {
            compatible = "zmk,macro-control-mode-release";
            label = "MAC_REL";
            #binding-cells = <0>;
        };
        macro_tap_time: macro_control_tap_time {
            compatible = "zmk,macro-control-tap-time";
            label = "MAC_TAP_TIME";
            #binding-cells = <1>;
        };
        macro_wait_time: macro_control_wait_time {
            compatible = "zmk,macro-control-wait-time";
            label = "MAC_WAIT_TIME";
            #binding-cells = <1>;
        };
        macro_pause_for_release: macro_pause_for_release {
            compatible = "zmk,macro-pause-for-release";
            label = "MAC_WAIT_REL";
            #binding-cells = <0>;
        };
        macro_param_1to1: macro_param_1to1 {
            compatible = "zmk,macro-param-1to1";
            label = "MAC_PARAM_1TO1";
            #binding-cells = <0>;
        };
        macro_param_1to2: macro_param_1to2 {
            compatible = "zmk,macro-param-1to2";
            label = "MAC_PARAM_1TO2";
            #binding-cells = <0>;
        };
        macro_param_2to1: macro_param_2to1 {
            compatible = "zmk,macro-param-2to1";
            label = "MAC_PARAM_2TO1";
            #binding-cells = <0>;
        };
        macro_param_2to2: macro_param_2to2 {
            compatible = "zmk,macro-param-2to2";
            label = "MAC_PARAM_2TO2";
            #binding-cells = <0>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        BASE {
            label = "Base";
            bindings = <
&none       &kp Q       &kp W         &kp F        &kp P      &kp B          &kp J            &kp L         &kp U       &kp Y      &kp SQT  &none
&none  &mt LWIN A  &mt LALT R   &mt LCTRL S  &mt LSHFT T      &kp G          &kp M      &mt RSHFT N   &mt RCTRL E  &mt RALT I   &mt RWIN O  &none
&none     &lt 3 Z       &kp X         &kp C        &kp D      &kp V          &kp K            &kp H     &kp COMMA  &kp PERIOD  &lt 3 SLASH  &none
                               &lt 6 ESCAPE  &lt 4 SPACE  &lt 5 TAB    &lt 8 ENTER  &lt 7 BACKSPACE  &lt 9 DELETE
            >;
        };

        EXTRA {
            label = "Extra";
            bindings = <
&none       &kp Q       &kp W         &kp E        &kp R      &kp T          &kp Y            &kp U         &kp I       &kp O               &kp P  &none
&none  &mt A LWIN  &mt S LALT   &mt D LCTRL  &mt F LSHFT      &kp G          &kp H      &mt J RSHFT   &mt K RCTRL  &mt L RALT  &mt SEMICOLON RWIN  &none
&none     &lt 3 Z       &kp X         &kp C        &kp V      &kp B          &kp N            &kp M     &kp COMMA  &kp PERIOD         &lt 3 SLASH  &none
                               &lt 6 ESCAPE  &lt 4 SPACE  &lt 5 TAB    &lt 8 ENTER  &lt 7 BACKSPACE  &lt 9 DELETE
            >;
        };

        TAP {
            label = "Tap";
            bindings = <
&none  &kp Q  &kp W       &kp F      &kp P    &kp B        &kp J          &kp L       &kp U       &kp Y    &kp SQT  &none
&none  &kp A  &kp R       &kp S      &kp T    &kp G        &kp M          &kp N       &kp E       &kp I      &kp O  &none
&none  &kp Z  &kp X       &kp C      &kp D    &kp V        &kp K          &kp H   &kp COMMA  &kp PERIOD  &kp SLASH  &none
                     &kp ESCAPE  &kp SPACE  &kp TAB    &kp ENTER  &kp BACKSPACE  &kp DELETE
            >;
        };

        BUTTON {
            label = "Button";
            bindings = <
&none  &kp K_UNDO  &kp K_CUT     &kp K_COPY    &kp K_PASTE     &kp K_REDO       &kp K_REDO    &kp K_PASTE     &kp K_COPY  &kp K_CUT  &kp K_UNDO  &none
&none    &kp LWIN   &kp LALT      &kp LCTRL      &kp LSHFT          &none            &none      &kp RSHFT      &kp RCTRL   &kp RALT    &kp RWIN  &none
&none  &kp K_UNDO  &kp K_CUT     &kp K_COPY    &kp K_PASTE     &kp K_REDO       &kp K_REDO    &kp K_PASTE     &kp K_COPY  &kp K_CUT  &kp K_UNDO  &none
                              &u_macro_btn3  &u_macro_btn1  &u_macro_btn2    &u_macro_btn2  &u_macro_btn1  &u_macro_btn3
            >;
        };

        NAV {
            label = "Nav";
            bindings = <
&none  &bootloader  &u_to_U_TAP  &u_to_U_EXTRA  &u_to_U_BASE  &none    &kp LS(C_AC_REDO)  &kp C_AC_PASTE  &kp C_AC_COPY  &kp C_AC_CUT  &kp C_AC_UNDO  &none
&none     &kp LWIN     &kp LALT      &kp LCTRL     &kp LSHFT  &none         &u_caps_word        &kp LEFT       &kp DOWN  &kp UP_ARROW      &kp RIGHT  &none
&none        &none        &none    &u_to_U_NUM   &u_to_U_NAV  &none           &kp INSERT        &kp HOME  &kp PAGE_DOWN   &kp PAGE_UP        &kp END  &none
                                         &none         &none  &none            &kp ENTER   &kp BACKSPACE     &kp DELETE
            >;
        };

        MOUSE {
            label = "Mouse";
            bindings = <
&none  &bootloader  &u_to_U_TAP  &u_to_U_EXTRA   &u_to_U_BASE  &none       &kp K_REDO    &kp K_PASTE     &kp K_COPY  &kp K_CUT  &kp K_UNDO  &none
&none     &kp LWIN     &kp LALT      &kp LCTRL      &kp LSHFT  &none            &none       &kp LEFT       &kp DOWN     &kp UP   &kp RIGHT  &none
&none        &none        &none    &u_to_U_SYM  &u_to_U_MOUSE  &none            &none          &none          &none      &none       &none  &none
                                         &none          &none  &none    &u_macro_btn2  &u_macro_btn1  &u_macro_btn3
            >;
        };

        MEDIA {
            label = "Media";
            bindings = <
&none  &bootloader  &u_to_U_TAP  &u_to_U_EXTRA   &u_to_U_BASE  &none     &rgb_ug 0 0      &rgb_ug 11 0        &rgb_ug 3 0      &rgb_ug 5 0  &rgb_ug 7 0  &none
&none     &kp LWIN     &kp LALT      &kp LCTRL      &kp LSHFT  &none    &ext_power 2        &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_NEXT  &none
&none        &none        &none    &u_to_U_FUN  &u_to_U_MEDIA  &none      &u_out_tog       &u_bt_sel_0        &u_bt_sel_1      &u_bt_sel_2  &u_bt_sel_3  &none
                                         &none          &none  &none     &kp C_PAUSE  &kp C_PLAY_PAUSE         &kp C_MUTE
            >;
        };

        NUM {
            label = "Num";
            bindings = <
&none  &kp RS(LEFT_BRACKET)  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9     &kp RIGHT_BRACKET    &none  &u_to_U_BASE  &u_to_U_EXTRA  &u_to_U_TAP  &bootloader  &none
&none         &kp SEMICOLON  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6             &kp EQUAL    &none     &kp RSHFT      &kp RCTRL     &kp RALT     &kp RWIN  &none
&none             &kp GRAVE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NON_US_BACKSLASH    &none   &u_to_U_NUM    &u_to_U_NAV        &none        &none  &none
                                             &kp PERIOD  &kp NUMBER_0             &kp MINUS    &none         &none          &none
            >;
        };

        SYM {
            label = "Sym";
            bindings = <
&none       &kp LBRC    &kp AMPERSAND          &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE    &none  &u_to_U_BASE  &u_to_U_EXTRA  &u_to_U_TAP  &bootloader  &none
&none  &kp SEMICOLON       &kp DOLLAR           &kp PERCENT              &kp CARET         &kp PLUS    &none     &kp RSHFT      &kp RCTRL     &kp RALT     &kp RWIN  &none
&none      &kp TILDE  &kp EXCLAMATION           &kp AT_SIGN               &kp HASH         &kp PIPE    &none   &u_to_U_SYM  &u_to_U_MOUSE        &none        &none  &none
                                       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp UNDERSCORE    &none         &none          &none
            >;
        };

        FUN {
            label = "Fun";
            bindings = <
&none  &kp F12  &kp F7     &kp F8     &kp F9        &kp PSCRN    &none  &u_to_U_BASE  &u_to_U_EXTRA  &u_to_U_TAP  &bootloader  &none
&none  &kp F11  &kp F4     &kp F5     &kp F6   &kp SCROLLLOCK    &none     &kp RSHFT      &kp RCTRL     &kp RALT     &kp RWIN  &none
&none  &kp F10  &kp F1     &kp F2     &kp F3  &kp PAUSE_BREAK    &none   &u_to_U_FUN  &u_to_U_MEDIA        &none        &none  &none
                        &kp K_APP  &kp SPACE          &kp TAB    &none         &none          &none
            >;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_0: u_macro_u_bt_sel_0 {
            label = "ZM_u_macro_u_bt_sel_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt 3 0 &bt 0 0>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_0: u_bt_sel_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_0";
            #binding-cells = <0>;
            bindings =
                <&bt 3 0>,
                <&u_macro_u_bt_sel_0>;

            mods = <(0x02|0x20)>;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_1: u_macro_u_bt_sel_1 {
            label = "ZM_u_macro_u_bt_sel_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt 3 1 &bt 0 0>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_1: u_bt_sel_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_1";
            #binding-cells = <0>;
            bindings =
                <&bt 3 1>,
                <&u_macro_u_bt_sel_1>;

            mods = <(0x02|0x20)>;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_2: u_macro_u_bt_sel_2 {
            label = "ZM_u_macro_u_bt_sel_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt 3 2 &bt 0 0>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_2: u_bt_sel_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_2";
            #binding-cells = <0>;
            bindings =
                <&bt 3 2>,
                <&u_macro_u_bt_sel_2>;

            mods = <(0x02|0x20)>;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_3: u_macro_u_bt_sel_3 {
            label = "ZM_u_macro_u_bt_sel_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt 3 3 &bt 0 0>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_3: u_bt_sel_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_3";
            #binding-cells = <0>;
            bindings =
                <&bt 3 3>,
                <&u_macro_u_bt_sel_3>;

            mods = <(0x02|0x20)>;
        };
    };
};

/ {
    macros {
        u_macro_u_bt_sel_4: u_macro_u_bt_sel_4 {
            label = "ZM_u_macro_u_bt_sel_4";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&bt 3 4 &bt 0 0>;
        };
    };
};

/ {
    behaviors {
        u_bt_sel_4: u_bt_sel_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "u_bt_sel_4";
            #binding-cells = <0>;
            bindings =
                <&bt 3 4>,
                <&u_macro_u_bt_sel_4>;

            mods = <(0x02|0x20)>;
        };
    };
};

/ {
    behaviors {
        u_out_tog: u_out_tog {
            compatible = "zmk,behavior-mod-morph";
            label = "u_out_tog";
            #binding-cells = <0>;
            bindings =
                <&out 0>,
                <&out 1>;

            mods = <(0x02|0x20)>;
        };
    };
};

/ {
    behaviors {
        u_caps_word: u_caps_word {
            compatible = "zmk,behavior-mod-morph";
            label = "u_caps_word";
            #binding-cells = <0>;
            bindings =
                <&caps_word>,
                <&kp (((((0x07) << 16) | (0x39))))>;

            mods = <(0x02|0x20)>;
        };
    };
};

/ {
    behaviors {
        u_to_U_BASE: u_to_U_BASE {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_BASE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 0>;
        };
    };
};

/ {
    behaviors {
        u_to_U_EXTRA: u_to_U_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_EXTRA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 1>;
        };
    };
};

/ {
    behaviors {
        u_to_U_TAP: u_to_U_TAP {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 2>;
        };
    };
};

/ {
    behaviors {
        u_to_U_BUTTON: u_to_U_BUTTON {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_BUTTON";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 3>;
        };
    };
};

/ {
    behaviors {
        u_to_U_NAV: u_to_U_NAV {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_NAV";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 4>;
        };
    };
};

/ {
    behaviors {
        u_to_U_MOUSE: u_to_U_MOUSE {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_MOUSE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 5>;
        };
    };
};

/ {
    behaviors {
        u_to_U_MEDIA: u_to_U_MEDIA {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_MEDIA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 6>;
        };
    };
};

/ {
    behaviors {
        u_to_U_NUM: u_to_U_NUM {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_NUM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 7>;
        };
    };
};

/ {
    behaviors {
        u_to_U_SYM: u_to_U_SYM {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_SYM";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 8>;
        };
    };
};

/ {
    behaviors {
        u_to_U_FUN: u_to_U_FUN {
            compatible = "zmk,behavior-tap-dance";
            label = "u_to_U_FUN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&none>,
                <&to 9>;
        };
    };
};

/ {
    macros {
        u_macro_btn1: u_macro_btn1 {
            label = "ZM_u_macro_btn1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&kp &kp>;
        };
    };
};

/ {
    macros {
        u_macro_btn2: u_macro_btn2 {
            label = "ZM_u_macro_btn2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&kp &kp>;
        };
    };
};

/ {
    macros {
        u_macro_btn3: u_macro_btn3 {
            label = "ZM_u_macro_btn3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings = <&kp &kp>;
        };
    };
};

/ {
    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings =
                <&mo>,
                <&kp>;
        };
    };
};
